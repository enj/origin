
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package github.com.openshift.api.authorization.v1alpha1;

import "github.com/openshift/api/authorization/v1/generated.proto";
import "k8s.io/api/rbac/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

// AccessRestriction is used to guard specific actions without invasive changes to the cluster's default RBAC policy.
// It supports either a whitelist or a blacklist based restriction.  It never grants any privileges - it can only be
// used to take privileges away.
message AccessRestriction {
  // Standard object's metadata.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines when this restriction is imposed and how to satisfy it.
  optional AccessRestrictionSpec spec = 2;
}

// AccessRestrictionList is a collection of AccessRestrictions
message AccessRestrictionList {
  // Standard object's metadata.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of AccessRestriction objects.
  repeated AccessRestriction items = 2;
}

// AccessRestrictionSpec holds the matching requirements.
// MatchAttributes is required.
// One of AllowedSubjects or DeniedSubjects must be specified.
message AccessRestrictionSpec {
  // If these rules cover the current request, then this restriction applies.
  // If AllowedSubjects is set, then only those subjects can perform the matching actions.
  // If DeniedSubjects is set, then only those subjects are restricted from performing the matching actions.
  // Required.
  // +patchStrategy=merge
  repeated k8s.io.api.rbac.v1.PolicyRule matchAttributes = 1;

  // The whitelist of subjects that are allowed to perform the actions defined by MatchAttributes.
  // Note that this only prevents a denial due to the access restriction.
  // The subject must still have a matching RBAC binding to actually perform the current action.
  // +patchStrategy=merge
  repeated SubjectMatcher allowedSubjects = 2;

  // The blacklist of subjects that are not allowed to perform the actions defined by MatchAttributes.
  // This restriction is processed before all RBAC data, and thus will reject actions that RBAC may otherwise permit.
  // +patchStrategy=merge
  repeated SubjectMatcher deniedSubjects = 3;
}

// SubjectMatcher defines how an access restriction matches against the current user or service account or group.
// Exactly one field must be non-nil.
message SubjectMatcher {
  // UserRestriction matches against user or service account subjects.
  // Use system:serviceaccount:NAMESPACE:NAME to target a specific service account.
  optional github.com.openshift.api.authorization.v1.UserRestriction userRestriction = 1;

  // GroupRestriction matches against group subjects.
  // Use system:serviceaccount:NAMESPACE to target all service accounts in a specific namespace.
  // Use system:serviceaccounts to target all service accounts.
  optional github.com.openshift.api.authorization.v1.GroupRestriction groupRestriction = 2;
}

