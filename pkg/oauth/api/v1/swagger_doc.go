package v1

// This file contains methods that can be used by the go-restful package to generate Swagger
// documentation for the object types found in 'types.go' This file is automatically generated
// by hack/update-generated-swagger-descriptions.sh and should be run after a full build of OpenShift.
// ==== DO NOT EDIT THIS FILE MANUALLY ====

var map_ActiveDirectoryConfig = map[string]string{
	"":                          "ActiveDirectoryConfig holds the necessary configuration options to define how an LDAP group sync interacts with an LDAP server using the Active Directory schema",
	"usersQuery":                "AllUsersQuery holds the template for an LDAP query that returns user entries.",
	"userNameAttributes":        "UserNameAttributes defines which attributes on an LDAP user entry will be interpreted as its OpenShift user name.",
	"groupMembershipAttributes": "GroupMembershipAttributes defines which attributes on an LDAP user entry will be interpreted as the groups it is a member of",
}

func (ActiveDirectoryConfig) SwaggerDoc() map[string]string {
	return map_ActiveDirectoryConfig
}

var map_AugmentedActiveDirectoryConfig = map[string]string{
	"":                          "AugmentedActiveDirectoryConfig holds the necessary configuration options to define how an LDAP group sync interacts with an LDAP server using the augmented Active Directory schema",
	"usersQuery":                "AllUsersQuery holds the template for an LDAP query that returns user entries.",
	"userNameAttributes":        "UserNameAttributes defines which attributes on an LDAP user entry will be interpreted as its OpenShift user name.",
	"groupMembershipAttributes": "GroupMembershipAttributes defines which attributes on an LDAP user entry will be interpreted as the groups it is a member of",
	"groupsQuery":               "AllGroupsQuery holds the template for an LDAP query that returns group entries.",
	"groupUIDAttribute":         "GroupUIDAttributes defines which attribute on an LDAP group entry will be interpreted as its unique identifier. (ldapGroupUID)",
	"groupNameAttributes":       "GroupNameAttributes defines which attributes on an LDAP group entry will be interpreted as its name to use for an OpenShift group",
}

func (AugmentedActiveDirectoryConfig) SwaggerDoc() map[string]string {
	return map_AugmentedActiveDirectoryConfig
}

var map_ClusterRoleScopeRestriction = map[string]string{
	"":                "ClusterRoleScopeRestriction describes restrictions on cluster role scopes",
	"roleNames":       "RoleNames is the list of cluster roles that can referenced.  * means anything",
	"namespaces":      "Namespaces is the list of namespaces that can be referenced.  * means any of them (including *)",
	"allowEscalation": "AllowEscalation indicates whether you can request roles and their escalating resources",
}

func (ClusterRoleScopeRestriction) SwaggerDoc() map[string]string {
	return map_ClusterRoleScopeRestriction
}

var map_LDAPQuery = map[string]string{
	"":             "LDAPQuery holds the options necessary to build an LDAP query",
	"baseDN":       "The DN of the branch of the directory where all searches should start from",
	"scope":        "The (optional) scope of the search. Can be: base: only the base object, one:  all object on the base level, sub:  the entire subtree Defaults to the entire subtree if not set",
	"derefAliases": "The (optional) behavior of the search with regards to alisases. Can be: never:  never dereference aliases, search: only dereference in searching, base:   only dereference in finding the base object, always: always dereference Defaults to always dereferencing if not set",
	"timeout":      "TimeLimit holds the limit of time in seconds that any request to the server can remain outstanding before the wait for a response is given up. If this is 0, no client-side limit is imposed",
	"filter":       "Filter is a valid LDAP search filter that retrieves all relevant entries from the LDAP server with the base DN",
	"pageSize":     "PageSize is the maximum preferred page size, measured in LDAP entries. A page size of 0 means no paging will be done.",
}

func (LDAPQuery) SwaggerDoc() map[string]string {
	return map_LDAPQuery
}

var map_LDAPSyncConfig = map[string]string{
	"":             "LDAPSyncConfig holds the necessary configuration options to define an LDAP group sync",
	"url":          "Host is the scheme, host and port of the LDAP server to connect to: scheme://host:port",
	"bindDN":       "BindDN is an optional DN to bind to the LDAP server with",
	"bindPassword": "BindPassword is an optional password to bind with during the search phase.",
	"insecure":     "Insecure, if true, indicates the connection should not use TLS. Cannot be set to true with a URL scheme of \"ldaps://\" If false, \"ldaps://\" URLs connect using TLS, and \"ldap://\" URLs are upgraded to a TLS connection using StartTLS as specified in https://tools.ietf.org/html/rfc2830",
	"ca":           "CA is the optional trusted certificate authority bundle to use when making requests to the server If empty, the default system roots are used",
	"groupUIDNameMapping":      "LDAPGroupUIDToOpenShiftGroupNameMapping is an optional direct mapping of LDAP group UIDs to OpenShift Group names",
	"rfc2307":                  "RFC2307Config holds the configuration for extracting data from an LDAP server set up in a fashion similar to RFC2307: first-class group and user entries, with group membership determined by a multi-valued attribute on the group entry listing its members",
	"activeDirectory":          "ActiveDirectoryConfig holds the configuration for extracting data from an LDAP server set up in a fashion similar to that used in Active Directory: first-class user entries, with group membership determined by a multi-valued attribute on members listing groups they are a member of",
	"augmentedActiveDirectory": "AugmentedActiveDirectoryConfig holds the configuration for extracting data from an LDAP server set up in a fashion similar to that used in Active Directory as described above, with one addition: first-class group entries exist and are used to hold metadata but not group membership",
}

func (LDAPSyncConfig) SwaggerDoc() map[string]string {
	return map_LDAPSyncConfig
}

var map_LDAPSyncConfigList = map[string]string{
	"":         "LDAPSyncConfigList us cool",
	"metadata": "Standard object's metadata.",
	"items":    "Items is the list of LDAPSyncConfig",
}

func (LDAPSyncConfigList) SwaggerDoc() map[string]string {
	return map_LDAPSyncConfigList
}

var map_OAuthAccessToken = map[string]string{
	"":               "OAuthAccessToken describes an OAuth access token",
	"metadata":       "Standard object's metadata.",
	"clientName":     "ClientName references the client that created this token.",
	"expiresIn":      "ExpiresIn is the seconds from CreationTime before this token expires.",
	"scopes":         "Scopes is an array of the requested scopes.",
	"redirectURI":    "RedirectURI is the redirection associated with the token.",
	"userName":       "UserName is the user name associated with this token",
	"userUID":        "UserUID is the unique UID associated with this token",
	"authorizeToken": "AuthorizeToken contains the token that authorized this token",
	"refreshToken":   "RefreshToken is the value by which this token can be renewed. Can be blank.",
}

func (OAuthAccessToken) SwaggerDoc() map[string]string {
	return map_OAuthAccessToken
}

var map_OAuthAccessTokenList = map[string]string{
	"":         "OAuthAccessTokenList is a collection of OAuth access tokens",
	"metadata": "Standard object's metadata.",
	"items":    "Items is the list of OAuth access tokens",
}

func (OAuthAccessTokenList) SwaggerDoc() map[string]string {
	return map_OAuthAccessTokenList
}

var map_OAuthAuthorizeToken = map[string]string{
	"":                    "OAuthAuthorizeToken describes an OAuth authorization token",
	"metadata":            "Standard object's metadata.",
	"clientName":          "ClientName references the client that created this token.",
	"expiresIn":           "ExpiresIn is the seconds from CreationTime before this token expires.",
	"scopes":              "Scopes is an array of the requested scopes.",
	"redirectURI":         "RedirectURI is the redirection associated with the token.",
	"state":               "State data from request",
	"userName":            "UserName is the user name associated with this token",
	"userUID":             "UserUID is the unique UID associated with this token. UserUID and UserName must both match for this token to be valid.",
	"codeChallenge":       "CodeChallenge is the optional code_challenge associated with this authorization code, as described in rfc7636",
	"codeChallengeMethod": "CodeChallengeMethod is the optional code_challenge_method associated with this authorization code, as described in rfc7636",
}

func (OAuthAuthorizeToken) SwaggerDoc() map[string]string {
	return map_OAuthAuthorizeToken
}

var map_OAuthAuthorizeTokenList = map[string]string{
	"":         "OAuthAuthorizeTokenList is a collection of OAuth authorization tokens",
	"metadata": "Standard object's metadata.",
	"items":    "Items is the list of OAuth authorization tokens",
}

func (OAuthAuthorizeTokenList) SwaggerDoc() map[string]string {
	return map_OAuthAuthorizeTokenList
}

var map_OAuthClient = map[string]string{
	"":                      "OAuthClient describes an OAuth client",
	"metadata":              "Standard object's metadata.",
	"secret":                "Secret is the unique secret associated with a client",
	"additionalSecrets":     "AdditionalSecrets holds other secrets that may be used to identify the client.  This is useful for rotation and for service account token validation",
	"respondWithChallenges": "RespondWithChallenges indicates whether the client wants authentication needed responses made in the form of challenges instead of redirects",
	"redirectURIs":          "RedirectURIs is the valid redirection URIs associated with a client",
	"grantMethod":           "GrantMethod determines how to handle grants for this client. If no method is provided, the cluster default grant handling method will be used. Valid grant handling methods are:\n - auto:   always approves grant requests, useful for trusted clients\n - prompt: prompts the end user for approval of grant requests, useful for third-party clients\n - deny:   always denies grant requests, useful for black-listed clients",
	"scopeRestrictions":     "ScopeRestrictions describes which scopes this client can request.  Each requested scope is checked against each restriction.  If any restriction matches, then the scope is allowed. If no restriction matches, then the scope is denied.",
}

func (OAuthClient) SwaggerDoc() map[string]string {
	return map_OAuthClient
}

var map_OAuthClientAuthorization = map[string]string{
	"":           "OAuthClientAuthorization describes an authorization created by an OAuth client",
	"metadata":   "Standard object's metadata.",
	"clientName": "ClientName references the client that created this authorization",
	"userName":   "UserName is the user name that authorized this client",
	"userUID":    "UserUID is the unique UID associated with this authorization. UserUID and UserName must both match for this authorization to be valid.",
	"scopes":     "Scopes is an array of the granted scopes.",
}

func (OAuthClientAuthorization) SwaggerDoc() map[string]string {
	return map_OAuthClientAuthorization
}

var map_OAuthClientAuthorizationList = map[string]string{
	"":         "OAuthClientAuthorizationList is a collection of OAuth client authorizations",
	"metadata": "Standard object's metadata.",
	"items":    "Items is the list of OAuth client authorizations",
}

func (OAuthClientAuthorizationList) SwaggerDoc() map[string]string {
	return map_OAuthClientAuthorizationList
}

var map_OAuthClientList = map[string]string{
	"":         "OAuthClientList is a collection of OAuth clients",
	"metadata": "Standard object's metadata.",
	"items":    "Items is the list of OAuth clients",
}

func (OAuthClientList) SwaggerDoc() map[string]string {
	return map_OAuthClientList
}

var map_OAuthRedirectReference = map[string]string{
	"":          "OAuthRedirectReference is a reference to an OAuth redirect object.",
	"metadata":  "Standard object's metadata.",
	"reference": "The reference to an redirect object in the current namespace.",
}

func (OAuthRedirectReference) SwaggerDoc() map[string]string {
	return map_OAuthRedirectReference
}

var map_RFC2307Config = map[string]string{
	"":                               "RFC2307Config holds the necessary configuration options to define how an LDAP group sync interacts with an LDAP server using the RFC2307 schema",
	"groupsQuery":                    "AllGroupsQuery holds the template for an LDAP query that returns group entries.",
	"groupUIDAttribute":              "GroupUIDAttributes defines which attribute on an LDAP group entry will be interpreted as its unique identifier. (ldapGroupUID)",
	"groupNameAttributes":            "GroupNameAttributes defines which attributes on an LDAP group entry will be interpreted as its name to use for an OpenShift group",
	"groupMembershipAttributes":      "GroupMembershipAttributes defines which attributes on an LDAP group entry will be interpreted  as its members. The values contained in those attributes must be queryable by your UserUIDAttribute",
	"usersQuery":                     "AllUsersQuery holds the template for an LDAP query that returns user entries.",
	"userUIDAttribute":               "UserUIDAttribute defines which attribute on an LDAP user entry will be interpreted as its unique identifier. It must correspond to values that will be found from the GroupMembershipAttributes",
	"userNameAttributes":             "UserNameAttributes defines which attributes on an LDAP user entry will be used, in order, as its OpenShift user name. The first attribute with a non-empty value is used. This should match your PreferredUsername setting for your LDAPPasswordIdentityProvider",
	"tolerateMemberNotFoundErrors":   "TolerateMemberNotFoundErrors determines the behavior of the LDAP sync job when missing user entries are encountered. If 'true', an LDAP query for users that doesn't find any will be tolerated and an only and error will be logged. If 'false', the LDAP sync job will fail if a query for users doesn't find any. The default value is 'false'. Misconfigured LDAP sync jobs with this flag set to 'true' can cause group membership to be removed, so it is recommended to use this flag with caution.",
	"tolerateMemberOutOfScopeErrors": "TolerateMemberOutOfScopeErrors determines the behavior of the LDAP sync job when out-of-scope user entries are encountered. If 'true', an LDAP query for a user that falls outside of the base DN given for the all user query will be tolerated and only an error will be logged. If 'false', the LDAP sync job will fail if a user query would search outside of the base DN specified by the all user query. Misconfigured LDAP sync jobs with this flag set to 'true' can result in groups missing users, so it is recommended to use this flag with caution.",
}

func (RFC2307Config) SwaggerDoc() map[string]string {
	return map_RFC2307Config
}

var map_RedirectReference = map[string]string{
	"":      "RedirectReference specifies the target in the current namespace that resolves into redirect URIs.  Only the 'Route' kind is currently allowed.",
	"group": "The group of the target that is being referred to.",
	"kind":  "The kind of the target that is being referred to.  Currently, only 'Route' is allowed.",
	"name":  "The name of the target that is being referred to. e.g. name of the Route.",
}

func (RedirectReference) SwaggerDoc() map[string]string {
	return map_RedirectReference
}

var map_ScopeRestriction = map[string]string{
	"":            "ScopeRestriction describe one restriction on scopes.  Exactly one option must be non-nil.",
	"literals":    "ExactValues means the scope has to match a particular set of strings exactly",
	"clusterRole": "ClusterRole describes a set of restrictions for cluster role scoping.",
}

func (ScopeRestriction) SwaggerDoc() map[string]string {
	return map_ScopeRestriction
}

var map_StringSource = map[string]string{
	"": "StringSource allows specifying a string inline, or externally via env var or file. When it contains only a string value, it marshals to a simple JSON string.",
}

func (StringSource) SwaggerDoc() map[string]string {
	return map_StringSource
}

var map_StringSourceSpec = map[string]string{
	"":        "StringSourceSpec specifies a string value, or external location",
	"value":   "Value specifies the cleartext value, or an encrypted value if keyFile is specified.",
	"env":     "Env specifies an envvar containing the cleartext value, or an encrypted value if the keyFile is specified.",
	"file":    "File references a file containing the cleartext value, or an encrypted value if a keyFile is specified.",
	"keyFile": "KeyFile references a file containing the key to use to decrypt the value.",
}

func (StringSourceSpec) SwaggerDoc() map[string]string {
	return map_StringSourceSpec
}
