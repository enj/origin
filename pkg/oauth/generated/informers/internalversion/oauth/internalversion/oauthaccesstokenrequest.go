// This file was automatically generated by informer-gen

package internalversion

import (
	time "time"

	oauth "github.com/openshift/origin/pkg/oauth/apis/oauth"
	internalinterfaces "github.com/openshift/origin/pkg/oauth/generated/informers/internalversion/internalinterfaces"
	internalclientset "github.com/openshift/origin/pkg/oauth/generated/internalclientset"
	internalversion "github.com/openshift/origin/pkg/oauth/generated/listers/oauth/internalversion"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// OAuthAccessTokenRequestInformer provides access to a shared informer and lister for
// OAuthAccessTokenRequests.
type OAuthAccessTokenRequestInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() internalversion.OAuthAccessTokenRequestLister
}

type oAuthAccessTokenRequestInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewOAuthAccessTokenRequestInformer constructs a new informer for OAuthAccessTokenRequest type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewOAuthAccessTokenRequestInformer(client internalclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredOAuthAccessTokenRequestInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredOAuthAccessTokenRequestInformer constructs a new informer for OAuthAccessTokenRequest type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredOAuthAccessTokenRequestInformer(client internalclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: nil,
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.Oauth().OAuthAccessTokenRequests().Watch(options)
			},
		},
		&oauth.OAuthAccessTokenRequest{},
		resyncPeriod,
		indexers,
	)
}

func (f *oAuthAccessTokenRequestInformer) defaultInformer(client internalclientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredOAuthAccessTokenRequestInformer(client, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *oAuthAccessTokenRequestInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&oauth.OAuthAccessTokenRequest{}, f.defaultInformer)
}

func (f *oAuthAccessTokenRequestInformer) Lister() internalversion.OAuthAccessTokenRequestLister {
	return internalversion.NewOAuthAccessTokenRequestLister(f.Informer().GetIndexer())
}
