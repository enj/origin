ServerName proxy.example.com

SSLProxyEngine On

# TODO: allow setting a proxy client cert
# SSLProxyMachineCertificateFile /etc/pki/tls/certs/authproxy.pem

# TODO: allow setting a CA and enabling backend cert validation
# SSLProxyCACertificateFile /etc/pki/CA/certs/ca.crt
SSLProxyCheckPeerCN Off
SSLProxyCheckPeerName Off
SSLProxyCheckPeerExpire Off

<If "env('AUTH') in {'GSSAPI_AND_BASIC', 'BASIC_ONLY'}">
    # In order to use the basic-auth proxy, an X-Csrf-Token must be present
    # Fail anything that doesn't have that header
    RewriteEngine On
    RewriteCond %{REQUEST_URI} ^/mod_auth/?
    RewriteCond %{HTTP:X-Csrf-Token} ^$ [NC]
    RewriteRule ^.* - [F,L]
</If>

<Location /mod_auth/>

    ProxyPass https://backend.example.com/
    Require valid-user

    <If "env('AUTH') == 'GSSAPI_ONLY'">
        # Kerberos auth-protected

        AuthType GSSAPI
        AuthName "GSSAPI Login"

        # Set the request header from the envvar if it exists
        RequestHeader set Remote-User %{REMOTE_USER}s

        GssapiCredStore keytab:/etc/httpd.keytab
    </If>

    <If "env('AUTH') == 'GSSAPI_AND_BASIC'">
        # Kerberos auth-protected with basic fallback

        AuthType GSSAPI
        AuthName "GSSAPI Login"

        # Set the request header from the envvar if it exists
        RequestHeader set Remote-User %{REMOTE_USER}s

        GssapiCredStore keytab:/etc/httpd.keytab
        GssapiBasicAuth on
    </If>

    <If "env('AUTH') == 'BASIC_ONLY'">
        # Basic auth-protected

        AuthType Basic
        AuthName "Basic Login"

        # Set the request header from the envvar if it exists
        RequestHeader set Remote-User %{REMOTE_USER}s env=REMOTE_USER

        AuthBasicProvider PAM
        AuthPamService httpd-pam
    </If>

</Location>

LoadModule authnz_pam_module modules/mod_authnz_pam.so

RequestHeader unset Remote-User
RequestHeader unset X-Remote-User
